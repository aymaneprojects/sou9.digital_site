import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import AdminLayout from "@/components/Admin/Layout";
import { useAuth } from "@/context/LocalAuthContext";
import { useLanguage } from "@/hooks/useLanguage";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { FaEdit, FaTrash, FaSearch, FaPlus, FaCheck, FaTimes, FaBoxOpen, FaSave } from "react-icons/fa";

// Types pour les commandes
interface Order {
  id: number;
  userId: number | null;
  totalAmount: number;
  status: string;
  paymentStatus: string;
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  paymentMethod: string;
  createdAt: string;
}

interface OrderItem {
  id: number;
  orderId: number;
  productId: number;
  quantity: number;
  price: number;
  productName: string;
  platform: string;
}

interface Product {
  id: number;
  name: string;
  price: number;
  platform: string;
  stock: number;
}

// Schéma pour la validation du formulaire
const orderSchema = z.object({
  email: z.string().email("Email invalide"),
  firstName: z.string().min(2, "Le prénom doit contenir au moins 2 caractères"),
  lastName: z.string().min(2, "Le nom doit contenir au moins 2 caractères"),
  phoneNumber: z.string().min(8, "Le numéro de téléphone doit contenir au moins 8 caractères"),
  paymentMethod: z.enum(["bank_transfer", "cash_on_delivery"]),
  status: z.enum(["pending", "processing", "shipped", "delivered", "cancelled"]),
  paymentStatus: z.enum(["pending", "completed", "failed", "refunded"]),
  userId: z.number().nullable(),
  
  // Ajouter le support pour les articles de commande
  items: z.array(z.object({
    productId: z.number(),
    quantity: z.number().min(1),
    price: z.number(),
    productName: z.string(),
    platform: z.string()
  })).min(1, "Au moins un article doit être ajouté")
});

type OrderFormValues = z.infer<typeof orderSchema>;

const AdminOrdersPage = () => {
  const { translate } = useLanguage();
  const { isAdmin, user, isLoading: authLoading } = useAuth();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false);
  const [isItemModalOpen, setIsItemModalOpen] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedItems, setSelectedItems] = useState<OrderItem[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [itemQuantity, setItemQuantity] = useState(1);
  
  useEffect(() => {
    // Set page title
    document.title = "Sou9Digital - " + translate("admin.ordersManagement");
    
    // Redirect if not admin after loading
    if (!authLoading && !isAdmin) {
      navigate("/auth");
    }
  }, [isAdmin, authLoading, navigate, translate]);
  
  // Formulaire pour les commandes
  const form = useForm<OrderFormValues>({
    resolver: zodResolver(orderSchema),
    defaultValues: {
      email: "",
      firstName: "",
      lastName: "",
      phoneNumber: "",
      paymentMethod: "bank_transfer",
      status: "pending",
      paymentStatus: "pending",
      userId: null,
      items: []
    }
  });
  
  // Récupérer toutes les commandes actives (non annulées)
  const { data: orders = [], isLoading: ordersLoading } = useQuery({
    queryKey: ["/api/orders"],
    queryFn: async () => {
      const response = await apiRequest("GET", "/api/orders");
      const allOrders = await response.json() as Order[];
      // Filtrer pour exclure uniquement les commandes annulées
      return allOrders.filter(order => order.status !== 'cancelled');
    }
  });
  
  // Récupérer tous les produits
  const { data: products = [], isLoading: productsLoading } = useQuery({
    queryKey: ["/api/products"],
    queryFn: async () => {
      const response = await apiRequest("GET", "/api/products");
      return await response.json() as Product[];
    }
  });
  
  // Créer une commande
  const createOrderMutation = useMutation({
    mutationFn: async (orderData: OrderFormValues) => {
      const response = await apiRequest("POST", "/api/orders", orderData);
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      toast({
        title: "Succès",
        description: "La commande a été créée avec succès.",
      });
      setIsOrderModalOpen(false);
      setSelectedItems([]);
    },
    onError: (error: any) => {
      toast({
        title: "Erreur",
        description: `Erreur lors de la création de la commande: ${error.message}`,
        variant: "destructive",
      });
    }
  });
  
  // Mettre à jour le statut d'une commande
  const updateOrderStatusMutation = useMutation({
    mutationFn: async ({ id, status }: { id: number; status: string }) => {
      const response = await apiRequest("PATCH", `/api/orders/${id}/status`, { status });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      toast({
        title: "Succès",
        description: "Le statut de la commande a été mis à jour.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Erreur",
        description: `Erreur lors de la mise à jour du statut: ${error.message}`,
        variant: "destructive",
      });
    }
  });
  
  // Mettre à jour le statut de paiement d'une commande
  const updatePaymentStatusMutation = useMutation({
    mutationFn: async ({ id, paymentStatus }: { id: number; paymentStatus: string }) => {
      const response = await apiRequest("PATCH", `/api/orders/${id}/payment`, { paymentStatus });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      toast({
        title: "Succès",
        description: "Le statut de paiement a été mis à jour.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Erreur",
        description: `Erreur lors de la mise à jour du paiement: ${error.message}`,
        variant: "destructive",
      });
    }
  });
  
  // Filtrer les commandes en fonction du terme de recherche
  const filteredOrders = orders.filter(
    (order) =>
      order.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.phoneNumber.includes(searchTerm) ||
      order.id.toString().includes(searchTerm)
  );
  
  // Gérer l'édition d'une commande
  const handleEditOrder = (order: Order) => {
    setSelectedOrder(order);
    
    // Récupérer les articles de la commande
    const getOrderItems = async () => {
      try {
        const response = await fetch(`/api/orders/${order.id}/items`);
        if (response.ok) {
          const items = await response.json();
          setSelectedItems(items);
        } else {
          toast({
            title: "Erreur",
            description: "Impossible de récupérer les articles de la commande",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error fetching order items:", error);
      }
    };
    
    getOrderItems();
    
    form.reset({
      email: order.email,
      firstName: order.firstName,
      lastName: order.lastName,
      phoneNumber: order.phoneNumber,
      paymentMethod: order.paymentMethod as "bank_transfer" | "cash_on_delivery",
      status: order.status as any,
      paymentStatus: order.paymentStatus as any,
      userId: order.userId,
      items: []
    });
    
    setIsOrderModalOpen(true);
  };
  
  // Gérer la création d'une commande
  const handleCreateOrder = () => {
    setSelectedOrder(null);
    setSelectedItems([]);
    form.reset({
      email: "",
      firstName: "",
      lastName: "",
      phoneNumber: "",
      paymentMethod: "bank_transfer",
      status: "pending",
      paymentStatus: "pending",
      userId: null,
      items: []
    });
    setIsOrderModalOpen(true);
  };
  
  // Gérer l'ajout d'un article à la commande
  const handleAddItem = () => {
    if (!selectedProduct) return;
    
    if (selectedProduct.stock < itemQuantity) {
      toast({
        title: "Erreur",
        description: `Stock insuffisant. Disponible: ${selectedProduct.stock}`,
        variant: "destructive",
      });
      return;
    }
    
    // Vérifier si le produit est déjà dans la liste
    const existingItem = selectedItems.find(item => 
      item.productId === selectedProduct.id && 
      item.platform === selectedProduct.platform
    );
    
    if (existingItem) {
      // Mettre à jour la quantité si le produit existe déjà
      setSelectedItems(items => 
        items.map(item => 
          item.productId === selectedProduct.id && item.platform === selectedProduct.platform
            ? { ...item, quantity: item.quantity + itemQuantity }
            : item
        )
      );
    } else {
      // Créer un nouvel objet d'article avec des propriétés valides et bien définies
      const newItem = {
        id: -Date.now(), // ID temporaire négatif
        orderId: selectedOrder?.id || -1,
        productId: selectedProduct.id,
        quantity: itemQuantity,
        price: selectedProduct.price,
        productName: selectedProduct.name,
        platform: selectedProduct.platform
      };
      
      // Ajouter le nouvel article à la liste
      setSelectedItems(prevItems => [...prevItems, newItem]);
    }
    
    setSelectedProduct(null);
    setItemQuantity(1);
    setIsItemModalOpen(false);
  };
  
  // Gérer la suppression d'un article
  const handleRemoveItem = (index: number) => {
    setSelectedItems(items => items.filter((_, i) => i !== index));
  };
  
  // Mutation pour mettre à jour une commande existante
  const updateOrderMutation = useMutation({
    mutationFn: async (orderData: OrderFormValues & { id: number; totalAmount: number }) => {
      const { id, ...data } = orderData;
      console.log("Mise à jour de la commande:", id, data);
      
      // Utiliser fetch directement pour avoir plus de contrôle sur la requête
      return fetch(`/api/orders/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': '0',
          'X-User-Role': 'admin'
        },
        body: JSON.stringify(data),
        credentials: 'include'
      }).then(response => {
        if (!response.ok) {
          return response.text().then(text => {
            throw new Error(text || "Erreur lors de la mise à jour de la commande");
          });
        }
        return response.json();
      });
    },
    onSuccess: () => {
      // Invalider le cache pour forcer un rafraîchissement
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      
      // Rafraîchir immédiatement les données
      queryClient.refetchQueries({ queryKey: ["/api/orders"] });
      
      toast({
        title: "Succès",
        description: "La commande a été mise à jour avec succès.",
      });
      
      // Fermer la modal
      setIsOrderModalOpen(false);
      
      // Réinitialiser la sélection
      setSelectedOrder(null);
      setSelectedItems([]);
    },
    onError: (error: any) => {
      console.error("Erreur mise à jour commande:", error);
      toast({
        title: "Erreur",
        description: `Erreur lors de la mise à jour de la commande: ${error.message}`,
        variant: "destructive",
      });
    }
  });

  // Soumettre le formulaire
  const onSubmit = (data: OrderFormValues) => {
    console.log("Soumission du formulaire avec les données:", data);
    
    // Vérifier si des articles sont sélectionnés
    if (selectedItems.length === 0) {
      toast({
        title: "Erreur",
        description: "Veuillez ajouter au moins un article à la commande",
        variant: "destructive",
      });
      return;
    }
    
    // Ajouter les articles sélectionnés au formulaire
    const formData = {
      ...data,
      items: selectedItems.map(item => ({
        productId: item.productId,
        quantity: item.quantity,
        price: item.price,
        productName: item.productName,
        platform: item.platform
      }))
    };
    
    // Calculer le montant total
    const totalAmount = selectedItems.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );
    
    try {
      if (selectedOrder) {
        console.log("Mise à jour de la commande existante avec ID:", selectedOrder.id);
        // Mettre à jour la commande existante
        updateOrderMutation.mutate({
          ...formData,
          id: selectedOrder.id,
          totalAmount
        } as any);
      } else {
        console.log("Création d'une nouvelle commande");
        // Créer une nouvelle commande
        createOrderMutation.mutate({
          ...formData,
          totalAmount
        } as any);
      }
    } catch (error) {
      console.error("Erreur lors de la soumission du formulaire:", error);
      toast({
        title: "Erreur",
        description: error instanceof Error ? error.message : String(error),
        variant: "destructive",
      });
    }
  };
  
  // Afficher le chargement
  if (authLoading || ordersLoading) {
    return (
      <div className="min-h-screen bg-[#0a0f1a] flex items-center justify-center">
        <div className="text-center">
          <svg className="animate-spin h-12 w-12 text-primary mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="text-white mt-4">{translate("admin.loading")}</p>
        </div>
      </div>
    );
  }
  
  // Allow render only if admin
  if (!isAdmin) {
    return null; // Will redirect in useEffect
  }
  
  return (
    <AdminLayout>
      <div className="space-y-4">
        {/* En-tête - titre et recherche */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 mb-2">
          <h1 className="text-xl sm:text-2xl font-cairo font-bold text-white flex items-center">
            <FaBoxOpen className="mr-2 text-primary" />
            {translate("admin.orders")}
          </h1>
          
          <div className="w-full sm:w-auto flex flex-wrap gap-2">
            <div className="relative flex-1 sm:flex-initial">
              <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <Input
                type="text"
                placeholder={translate("admin.searchOrders")}
                className="pl-9 w-full sm:w-[200px] bg-[#132743] border-[#264661]"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            
            <Button 
              onClick={() => navigate("/admin/orders/validation")}
              className="bg-[#132743] hover:bg-[#1e3a5f] text-white border border-[#264661] text-xs sm:text-sm"
              size="sm"
            >
              {translate("admin.viewValidatedOrders") || "Commandes validées"}
            </Button>

            <Button 
              onClick={() => navigate("/admin/orders/cancelled")}
              className="bg-[#132743] hover:bg-[#1e3a5f] text-white border border-[#264661] text-xs sm:text-sm"
              size="sm"
            >
              {translate("admin.viewCancelledOrders") || "Commandes annulées"}
            </Button>
          </div>
        </div>
        
        {/* Bouton d'ajout de commande */}
        <div className="flex justify-end mb-2">
          <Button 
            onClick={handleCreateOrder}
            className="bg-primary hover:bg-primary/90 text-white text-xs md:text-sm"
            size="sm"
          >
            <span className="flex items-center">
              <FaPlus className="mr-1.5" size={12} />
              {translate("admin.createOrder")}
            </span>
          </Button>
        </div>
        
        <div className="bg-[#132743] rounded-lg shadow-lg overflow-x-auto">
          <Table className="min-w-full">
            <TableHeader>
              <TableRow className="border-b border-[#B8860B]/30">
                <TableHead className="text-primary font-bold">ID</TableHead>
                <TableHead className="text-primary font-bold">{translate("admin.customer")}</TableHead>
                <TableHead className="text-primary font-bold">{translate("admin.amount")}</TableHead>
                <TableHead className="text-primary font-bold">{translate("admin.orderStatus")}</TableHead>
                <TableHead className="text-primary font-bold">{translate("admin.paymentStatus")}</TableHead>
                <TableHead className="text-primary font-bold hidden md:table-cell">{translate("admin.paymentMethod")}</TableHead>
                <TableHead className="text-primary font-bold hidden md:table-cell">{translate("admin.date")}</TableHead>
                <TableHead className="text-primary font-bold">{translate("admin.actions")}</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredOrders.length > 0 ? (
                filteredOrders.map((order) => (
                  <TableRow 
                    key={order.id} 
                    className="border-b border-[#B8860B]/20 hover:bg-[#0a0f1a]/30"
                  >
                    <TableCell className="font-medium">{order.id}</TableCell>
                    <TableCell>
                      <div className="flex flex-col">
                        <span className="font-medium">{order.firstName} {order.lastName}</span>
                        <span className="text-xs text-gray-400">{order.email}</span>
                      </div>
                    </TableCell>
                    <TableCell className="font-medium">{order.totalAmount.toFixed(2)} MAD</TableCell>
                    <TableCell>
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        order.status === 'delivered' 
                          ? 'bg-green-900/50 text-green-200' 
                          : order.status === 'cancelled'
                          ? 'bg-red-900/50 text-red-200'
                          : order.status === 'processing'
                          ? 'bg-blue-900/50 text-blue-200'
                          : order.status === 'shipped'
                          ? 'bg-purple-900/50 text-purple-200'
                          : 'bg-yellow-900/50 text-yellow-200'
                      }`}>
                        {order.status}
                      </span>
                    </TableCell>
                    <TableCell>
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        order.paymentStatus === 'completed' 
                          ? 'bg-green-900/50 text-green-200' 
                          : order.paymentStatus === 'failed'
                          ? 'bg-red-900/50 text-red-200'
                          : order.paymentStatus === 'refunded'
                          ? 'bg-purple-900/50 text-purple-200'
                          : 'bg-yellow-900/50 text-yellow-200'
                      }`}>
                        {order.paymentStatus}
                      </span>
                    </TableCell>
                    <TableCell className="hidden md:table-cell">
                      <span className="text-sm">
                        {order.paymentMethod === 'bank_transfer' 
                          ? translate("admin.bankTransfer") 
                          : translate("admin.cashOnDelivery")}
                      </span>
                    </TableCell>
                    <TableCell className="hidden md:table-cell">
                      {new Date(order.createdAt).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-wrap gap-1">
                        <Button 
                          size="sm" 
                          variant="ghost" 
                          className="text-blue-400 hover:text-blue-400/80 hover:bg-blue-400/10 h-8 w-8 p-0"
                          onClick={() => handleEditOrder(order)}
                          title={translate("admin.editOrder")}
                        >
                          <FaEdit />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="ghost" 
                          className="text-green-400 hover:text-green-400/80 hover:bg-green-400/10 h-8 w-8 p-0"
                          onClick={() => {
                            if (order.paymentStatus !== 'completed') {
                              updatePaymentStatusMutation.mutate({ 
                                id: order.id, 
                                paymentStatus: 'completed' 
                              });
                            }
                          }}
                          disabled={order.paymentStatus === 'completed'}
                          title={translate("admin.markAsPaid")}
                        >
                          <FaCheck />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="ghost" 
                          className="text-[#E63946] hover:text-[#E63946]/80 hover:bg-[#E63946]/10 h-8 w-8 p-0"
                          onClick={() => {
                            if (window.confirm("Êtes-vous sûr de vouloir annuler cette commande ?")) {
                              updateOrderStatusMutation.mutate({ 
                                id: order.id, 
                                status: 'cancelled' 
                              });
                            }
                          }}
                          disabled={order.status === 'cancelled' || order.status === 'delivered'}
                          title={translate("admin.cancelOrder")}
                        >
                          <FaTimes />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={8} className="text-center py-8">
                    <div className="flex flex-col items-center justify-center gap-2">
                      {searchTerm ? (
                        <>
                          <FaSearch className="text-gray-400 text-2xl mb-2" />
                          <p className="text-gray-400">{translate("admin.noOrdersFound")}</p>
                        </>
                      ) : (
                        <>
                          <FaBoxOpen className="text-gray-400 text-3xl mb-2" />
                          <p className="text-gray-400">{translate("admin.noOrders")}</p>
                        </>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </div>
      
      {/* Modal pour créer/éditer une commande */}
      <Dialog open={isOrderModalOpen} onOpenChange={setIsOrderModalOpen}>
        <DialogContent className="bg-[#132743] text-white border-[#B8860B] max-w-3xl">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-primary">
              {selectedOrder ? translate("admin.editOrder") : translate("admin.createOrder")}
            </DialogTitle>
            <DialogDescription className="text-gray-400">
              {selectedOrder 
                ? translate("admin.editOrderDescription") 
                : translate("admin.createOrderDescription")}
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form className="space-y-6">
              <div className="p-4 bg-[#0a0f1a]/50 rounded-lg border border-[#264661]/30">
                <h3 className="text-white font-medium mb-4 flex items-center">
                  <span className="inline-flex items-center justify-center mr-2 h-6 w-6 rounded-full bg-blue-600 text-white text-xs">1</span>
                  {translate("admin.customerInformation")}
                </h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="firstName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.firstName")}</FormLabel>
                        <FormControl>
                          <Input 
                            {...field} 
                            className="bg-[#0a0f1a] border-[#B8860B] text-white" 
                          />
                        </FormControl>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="lastName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.lastName")}</FormLabel>
                        <FormControl>
                          <Input 
                            {...field} 
                            className="bg-[#0a0f1a] border-[#B8860B] text-white" 
                          />
                        </FormControl>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.email")}</FormLabel>
                        <FormControl>
                          <Input 
                            {...field} 
                            className="bg-[#0a0f1a] border-[#B8860B] text-white" 
                            type="email"
                          />
                        </FormControl>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="phoneNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.phoneNumber")}</FormLabel>
                        <FormControl>
                          <Input 
                            {...field} 
                            className="bg-[#0a0f1a] border-[#B8860B] text-white" 
                          />
                        </FormControl>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                </div>
              </div>
              
              <div className="p-4 bg-[#0a0f1a]/50 rounded-lg border border-[#264661]/30">
                <h3 className="text-white font-medium mb-4 flex items-center">
                  <span className="inline-flex items-center justify-center mr-2 h-6 w-6 rounded-full bg-blue-600 text-white text-xs">2</span>
                  {translate("admin.orderStatus")}
                </h3>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="paymentMethod"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.paymentMethod")}</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="bg-[#0a0f1a] border-[#B8860B] text-white">
                              <SelectValue placeholder={translate("admin.selectPaymentMethod")} />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="bg-[#0a0f1a] border-[#B8860B] text-white">
                            <SelectItem value="bank_transfer">{translate("admin.bankTransfer")}</SelectItem>
                            <SelectItem value="cash_on_delivery">{translate("admin.cashOnDelivery")}</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.orderStatus")}</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="bg-[#0a0f1a] border-[#B8860B] text-white">
                              <SelectValue placeholder={translate("admin.selectStatus")} />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="bg-[#0a0f1a] border-[#B8860B] text-white">
                            <SelectItem value="pending">{translate("admin.pending")}</SelectItem>
                            <SelectItem value="processing">{translate("admin.processing")}</SelectItem>
                            <SelectItem value="shipped">{translate("admin.shipped")}</SelectItem>
                            <SelectItem value="delivered">{translate("admin.delivered")}</SelectItem>
                            <SelectItem value="cancelled">{translate("admin.cancelled")}</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="paymentStatus"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-white">{translate("admin.paymentStatus")}</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="bg-[#0a0f1a] border-[#B8860B] text-white">
                              <SelectValue placeholder={translate("admin.selectPaymentStatus")} />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent className="bg-[#0a0f1a] border-[#B8860B] text-white">
                            <SelectItem value="pending">{translate("admin.pending")}</SelectItem>
                            <SelectItem value="completed">{translate("admin.completed")}</SelectItem>
                            <SelectItem value="failed">{translate("admin.failed")}</SelectItem>
                            <SelectItem value="refunded">{translate("admin.refunded")}</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage className="text-[#E63946]" />
                      </FormItem>
                    )}
                  />
                </div>
              </div>
              
              <div className="p-4 bg-[#0a0f1a]/50 rounded-lg border border-[#264661]/30 mt-4">
                <h3 className="text-white font-medium mb-4 flex items-center">
                  <span className="inline-flex items-center justify-center mr-2 h-6 w-6 rounded-full bg-blue-600 text-white text-xs">3</span>
                  {translate("admin.orderItems")}
                </h3>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold text-white">{translate("admin.orderItems")}</h3>
                  <Button 
                    type="button"
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                    onClick={() => setIsItemModalOpen(true)}
                  >
                    <FaPlus className="mr-2" />
                    {translate("admin.addItem")}
                  </Button>
                </div>
                
                {selectedItems.length > 0 ? (
                  <div className="bg-[#0a0f1a] rounded-lg p-3 mb-4">
                    <Table>
                      <TableHeader>
                        <TableRow className="border-b border-[#B8860B]/30">
                          <TableHead className="text-primary">{translate("admin.product")}</TableHead>
                          <TableHead className="text-primary">{translate("admin.platform")}</TableHead>
                          <TableHead className="text-primary">{translate("admin.price")}</TableHead>
                          <TableHead className="text-primary">{translate("admin.quantity")}</TableHead>
                          <TableHead className="text-primary">{translate("admin.total")}</TableHead>
                          <TableHead className="text-primary"></TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {selectedItems.map((item, index) => (
                          <TableRow key={index} className="border-b border-[#B8860B]/20">
                            <TableCell>{item.productName}</TableCell>
                            <TableCell>{item.platform}</TableCell>
                            <TableCell>{item.price.toFixed(2)} MAD</TableCell>
                            <TableCell>{item.quantity}</TableCell>
                            <TableCell>{(item.price * item.quantity).toFixed(2)} MAD</TableCell>
                            <TableCell>
                              <Button 
                                size="sm"
                                variant="ghost"
                                className="text-[#E63946] hover:text-[#E63946]/80 hover:bg-[#E63946]/10 h-8 w-8 p-0"
                                onClick={() => handleRemoveItem(index)}
                              >
                                <FaTrash />
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                        <TableRow>
                          <TableCell colSpan={4} className="text-right font-bold">
                            {translate("admin.totalAmount")}:
                          </TableCell>
                          <TableCell colSpan={2} className="font-bold">
                            {selectedItems.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2)} MAD
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                  <div className="bg-[#0a0f1a] rounded-lg p-4 text-center text-gray-400 mb-4">
                    {translate("admin.noItemsAdded")}
                  </div>
                )}
                
                {selectedItems.length === 0 && (
                  <FormMessage className="text-[#E63946]">
                    {translate("admin.atLeastOneItem")}
                  </FormMessage>
                )}
              </div>
              
              <DialogFooter className="pt-4 flex justify-end gap-3">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsOrderModalOpen(false)}
                  className="border-[#B8860B] text-white hover:bg-[#B8860B]/10"
                >
                  {translate("admin.cancelButton")}
                </Button>
                <Button 
                  type="button" 
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                  onClick={form.handleSubmit(onSubmit)}
                  disabled={(createOrderMutation.isPending || updateOrderMutation.isPending) || selectedItems.length === 0}
                >
                  <FaSave className="mr-2" />
                  {(createOrderMutation.isPending || updateOrderMutation.isPending)
                    ? translate("admin.saving") 
                    : selectedOrder 
                      ? translate("admin.saveChanges") 
                      : translate("admin.createOrder")}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* Modal pour ajouter un élément à la commande */}
      <Dialog open={isItemModalOpen} onOpenChange={setIsItemModalOpen}>
        <DialogContent className="bg-[#132743] text-white border-[#B8860B]">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-primary">
              {translate("admin.addItem")}
            </DialogTitle>
            <DialogDescription className="text-gray-400">
              {translate("admin.selectProductAndQuantity")}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label className="text-white">{translate("admin.product")}</Label>
              <Select onValueChange={(value) => {
                const product = products.find(p => p.id === parseInt(value));
                if (product) setSelectedProduct(product);
              }}>
                <SelectTrigger className="bg-[#0a0f1a] border-[#B8860B] text-white">
                  <SelectValue placeholder={translate("admin.selectProduct")} />
                </SelectTrigger>
                <SelectContent className="bg-[#0a0f1a] border-[#B8860B] text-white max-h-56">
                  {products.map((product) => (
                    <SelectItem key={product.id} value={product.id.toString()}>
                      {product.name} - {product.platform} ({product.stock} {translate("admin.inStock")})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label className="text-white">{translate("admin.quantity")}</Label>
              <Input 
                type="number"
                min="1"
                value={itemQuantity}
                onChange={(e) => setItemQuantity(parseInt(e.target.value) || 1)}
                className="bg-[#0a0f1a] border-[#B8860B] text-white"
              />
            </div>
            
            <div className="pt-2 flex justify-end space-x-2">
              <Button 
                type="button"
                variant="outline"
                onClick={() => setIsItemModalOpen(false)}
                className="border-[#B8860B] text-white hover:bg-[#B8860B]/10"
              >
                {translate("admin.cancelButton")}
              </Button>
              <Button 
                type="button"
                className="bg-blue-600 hover:bg-blue-700 text-white"
                onClick={handleAddItem}
                disabled={!selectedProduct}
              >
                <FaPlus className="mr-2" />
                {translate("admin.addItem")}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </AdminLayout>
  );
};

export default AdminOrdersPage;
